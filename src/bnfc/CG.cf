
comment "#" ;
comment "SETS" ;
comment "SUBREADINGS" ;
comment "CONSTRAINTS" ;
comment "MAPPINGS" ;
comment "DELIMITERS" ;
comment "SOFT-DELIMITERS" ;
comment "AFTER-SECTIONS" ;
comment "BEFORE-SECTIONS" ;
comment "NULL-SECTION" ;

-- hacks
comment "ADD" ; 
comment "IFF" ;
comment "MAP" ;
comment "SUBSTITUTE" ;



Sections. Grammar ::= [Section] ;
separator nonempty Section "SECTION" ;  --TODO: check if we can use multiple things as a separator (e.g. SECTION / BEFORE-SECTIONS / AFTER-SECTIONS

Defs.  Section ::= [Def] ;
terminator Def "" ;

--------------------------------------------------------------------------------
-- Sets and lists can be defined at the beginning of the grammar
-- Lists are bound by OR with just concatenation:
--   LIST V  = vblex vbser vaux vbhaver vbdo ; --just tags
-- 
-- Sets use "OR" or "|":
--   SET CLB = SENT | V-FIN | Subj ; --named lists

SetDef. Def  ::= SetDecl ;

Set.   SetDecl   ::= "SET" SetName "=" TagSet ";" ;
List.  SetDecl   ::= "LIST" SetName "=" [Tag] ";" ;
BList. SetDecl   ::= "LIST" ">>>" "=" ">>>" ";" ; -- grmbl magic tags
EList. SetDecl   ::= "LIST" "<<<" "=" "<<<" ";" ; -- Should I have >>> as a set name or tag name ... at least this doesn't give me more errors!


-- Templates are contextual tests identified by a name. 
-- They are referred to as T:name in rules.

TemplDef. Def  ::= TemplDecl ;

ListTempl.   TemplDecl ::= "TEMPLATE" SetName "=" [Template] ";" ; --This allows Template to contain T:templ, which is intended behaviour.
SingleTempl. TemplDecl ::= "TEMPLATE" SetName "=" Cond1 ";" ;


-- Set names start with uppercase letter or number 
SetName.  SetName ::= UIdent ;
SetMeta.  SetName ::= "<" UIdent ">" ;
SetSynt.  SetName ::= "@" UIdent ;
_.        SetName ::= "$$" SetName ; -- Unification; just read them as regular set names
--_.        SetName ::= "(" SetName ")" ; maybe not


--------------------------------------------------------------------------------
-- Tags can be wordforms or lemmas/wordforms, identifiers or named sets.

Lemma.   Tag1 ::= Str ; 
LemmaCI. Tag1 ::= Str "i" ; 
Regex.   Tag1 ::= Str "r" ;
Tag.     Tag1 ::= Id ;
BOS.     Tag1 ::= ">>>" ;
EOS.     Tag1 ::= "<<<" ;
--_.       Tag1 ::= "(" Tag ")" ;
--_.       Tag1 ::= "+" Tag1 ; -- TODO what is this???

coercions Tag 1 ; --This takes care of parenthesising one tag (which has no effect, can be done randomly). Parenthesising a list of tags will match the constructor AND, and that list has to be >1 tags.

separator nonempty Tag "" ;
--separator nonempty Tag "" ;

----------------------------------------------------------------------
-- Rules: e.g.
-- REMOVE Foo IF (-1 Bar) 

RuleDef. Def ::= Rule ;

SelectIf.     Rule ::= SELECT TagSet MaybeIF [Cond] ";" ;
RemoveIf.     Rule ::= REMOVE TagSet MaybeIF [Cond] ";" ;
SelectAlways. Rule ::= SELECT TagSet ";" ;
RemoveAlways. Rule ::= REMOVE TagSet ";" ;
MatchLemma.   Rule ::= Str Rule ; --for some reason "<az>" SELECT foo ... doesn't work with String

rules SELECT ::= "SELECT" MaybeName Subr ;
rules REMOVE ::= "REMOVE" MaybeName Subr ;

rules MaybeIF   ::= "IF" | "if" | ;
rules MaybeName ::= ":" Id | ;

SubrTarget.      Subr ::= "SUB" ":" Signed ;
SubrTargetStar.  Subr ::= "SUB:*" ;
SubrEmpty.       Subr ::= ;

CondNotPos.   Cond2 ::= "NOT" Position TagSet ;
CondPos.      Cond2 ::= Position TagSet ;
CondBarrier.  Cond2 ::= Position TagSet "BARRIER" TagSet ;
CondCBarrier. Cond2 ::= Position TagSet "CBARRIER" TagSet ;
CondNotBar.   Cond2 ::= "NOT" Position TagSet "BARRIER" TagSet ;
CondNotCBar.  Cond2 ::= "NOT" Position TagSet "CBARRIER" TagSet ;
CondTemplate. Cond2 ::= "T:" SetName ; --Can be linked: SELECT (tag) IF (1 foo LINK T:tmpl LINK 1* bar) ;
CondLinked.   Cond1 ::= [Cond2] ; 
CondNegate.   Cond  ::= "NEGATE" Cond1 ;

CondTemplInl. Cond  ::= "(" [Template] ")" ; -- I think VISL CG-3 accepts it without parentheses.
											  -- Whatever, this is a terribly easy preprocessing step,
											  -- and saves me one shift/reduce conflict.

_.            Cond ::= "(" Cond1 ")" ;


separator nonempty Cond2 "LINK" ;
separator nonempty Cond1 "" ;
separator nonempty Cond "" ;

-- Template: REMOVE V-FIN IF (0 Inf) ((1C* V-FIN) OR (-1C* V-FIN));
-- OR separates here conditions, not tagsets.
Template. Template ::= "(" Cond1 ")" ;
separator nonempty Template "OR" ;

-- Essentially, tags bound by AND are like one tag.
-- These tags are separated by spaces and enclosed in parentheses.
-- Also you can just parenthesise a single tag randomly.
--- TODO find some hack to force the list nonempty (abuse numbers?)
AND.     Tag1 ::= "(" [Tag] ")" ; 

-- OR 
OR.      TagSet ::= TagSet1 Or TagSet ; 
Diff.    TagSet ::= TagSet1 "-" TagSet ;
Cart.    TagSet ::= TagSet1 "+" TagSet ;
All.     TagSet ::= "(*)" ;
NilT.    TagSet1 ::= Tag ;
Named.   TagSet1 ::= SetName ;

coercions TagSet 1 ;



rules Or ::= "OR" | "|" ;

Exactly.     	 Position ::= Signed ;
AtLeastPre.  	 Position ::= "*" Signed ;
AtLeastPost. 	 Position ::= Signed "*" ; 
AtLPostCaut1. 	 Position ::= Signed "C*" ;
AtLPostCaut2. 	 Position ::= "*" Signed "C" ;
Cautious.    	 Position ::= Position "C" ; 
--TODO: check if subreadings can be attached to a full position: e.g. -1C*/2 or 0C/*
Subreading.  	 Position ::= Signed "/" Signed ;
SubreadingStar.  Position ::= Signed "/" "*" ;


--token Punct ('/'|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!'|'←'|'→') ;
token UIdent ((upper)(letter|digit|'/'|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!')*
	      |(digit)(upper|lower|'/'|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!')* --if it begins with number, can't end in / or C, because that's ambiguous with positions
		      (upper - ["C"]|lower|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!')+
              |('+')(digit|letter|'/'|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!')+ 
              |('+'|'-')(letter|'/'|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!')+) ;
                   --cannot end in digit if it begins with -

token Id ((letter)(upper|letter|digit|'/'|'_'|'+'|'-'|'!'|'¿'|'¡')*
          |('\\'|'+')(digit|letter|'/'|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!')+) ;

token Str ('"' ((char - ["\""]))* '"') ; -- to allow e.g. ("\,") OR ("\:") OR ("\;")

token Signed ('-'? (digit)+) ;