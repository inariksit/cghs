
comment "#" ;
comment "SETS" ;
comment "SUBREADINGS" ;
comment "CONSTRAINTS" ;
comment "MAPPING" ;
comment "DELIMITERS" ;
comment "SOFT-DELIMITERS" ;
comment "AFTER-SECTIONS" ;
comment "BEFORE-SECTIONS" ;
comment "NULL-SECTION" ;
comment "END" ;

-- hacks
comment "ADD" ; 
comment "IFF" ;
comment "SUBSTITUTE" ;



Sections. Grammar ::= [Section] ;
separator nonempty Section "SECTION" ;  --TODO: check if we can use multiple things as a separator (e.g. SECTION / BEFORE-SECTIONS / AFTER-SECTIONS

Defs.  Section ::= [Def] ;
terminator Def "" ;

--------------------------------------------------------------------------------
-- Sets and lists can be defined at the beginning of the grammar
-- Lists are bound by OR with just concatenation:
--   LIST V  = vblex vbser vaux vbhaver vbdo ; --just tags
-- 
-- Sets use "OR" or "|":
--   SET CLB = SENT | V-FIN | Subj ; --named lists

SetDef. Def  ::= SetDecl ;

Set.   SetDecl   ::= "SET" Id "=" TagSet ";" ;
List.  SetDecl   ::= "LIST" Id "=" [Tag] ";" ;
BList. SetDecl   ::= "LIST" ">>>" "=" ">>>" ";" ; -- grmbl magic tags
EList. SetDecl   ::= "LIST" "<<<" "=" "<<<" ";" ; -- Should I have >>> as a set name or tag name ... at least this doesn't give me more errors!


-- Templates are contextual tests identified by a name. 
-- They are referred to as T:name in rules.

TemplDef. Def  ::= TemplDecl ;

ListTempl.   TemplDecl ::= "TEMPLATE" Id "=" [Template] ";" ; --This allows Template to contain T:templ, which is intended behaviour.
SingleTempl. TemplDecl ::= "TEMPLATE" Id "=" Cond1 ";" ;


-- Set names: ComplexIds or fancy added stuff.
-- $$ is not part of the set name, you can use it with any
SetName.  Id ::= ComplexId ;
SetMeta.  Id ::= "<" ComplexId ">" ;
SetSynt.  Id ::= "@" ComplexId ;  -- Syntactic tags
SetSem.  Id ::= "&" ComplexId ;  -- Semantic tags
SetUnif.  Id ::= "$$" Id ; -- Unification


--------------------------------------------------------------------------------
-- Rules: e.g.
-- REMOVE Foo IF (-1 Bar) 

RuleDef. Def ::= Rule ;

SelectIf.     Rule ::= "SELECT" ObligatoryName Subr TagSet MaybeIF [Cond] ";" ;
RemoveIf.     Rule ::= "REMOVE" ObligatoryName Subr TagSet MaybeIF [Cond] ";" ;
SelectAlways. Rule ::= "SELECT" ObligatoryName Subr TagSet ";" ;
RemoveAlways. Rule ::= "REMOVE" ObligatoryName Subr TagSet ";" ;
MapIf.        Rule ::= "MAP" ObligatoryName TagSet MaybeTrg TagSet MaybeIF [Cond] ";" ;
MapAlways.    Rule ::= "MAP" ObligatoryName TagSet MaybeTrg TagSet ";" ;
MatchLemma.   Rule ::= String Rule ; 
MatchWF.      Rule ::= WordForm Rule ;

rules MaybeIF   ::= "IF" | "if" | ;

position token ObligatoryName ( ':' (char - [" "])* ) ;

rules MaybeName ::= ":" ComplexId | ;
rules MaybeTrg  ::= "TARGET" | ;

SubrTarget.      Subr ::= "SUB" ":" Signed ;
SubrTargetStar.  Subr ::= "SUB:*" ;
SubrEmpty.       Subr ::= ;


--------------------------------------------------------------------------------
-- Conditions

CondNotPos.   Cond2 ::= "NOT" Position TagSet ;
CondPos.      Cond2 ::= Position TagSet ;
CondBarrier.  Cond2 ::= Position TagSet "BARRIER" TagSet ;
CondCBarrier. Cond2 ::= Position TagSet "CBARRIER" TagSet ;
CondNotBar.   Cond2 ::= "NOT" Position TagSet "BARRIER" TagSet ;
CondNotCBar.  Cond2 ::= "NOT" Position TagSet "CBARRIER" TagSet ;
CondTemplate. Cond2 ::= "T:" Id ; --Can be linked: SELECT (tag) IF (1 foo LINK T:tmpl LINK 1* bar) ;

CondLinked.   Cond1 ::= [Cond2] ; 

CondTemplInl. Cond  ::= "(" [Template] ")" ; -- I think VISL CG-3 accepts it without parentheses.
											  -- Whatever, this is a terribly easy preprocessing step,
											  -- and saves me one shift/reduce conflict.
CondNegate.   Cond ::= "(" "NEGATE" Cond1 ")" ; -- Parentheses ???

_.            Cond ::= "(" Cond1 ")" ;


separator nonempty Cond2 "LINK" ;
separator nonempty Cond1 "" ;
separator nonempty Cond "" ;

-- Template: REMOVE V-FIN IF (0 Inf) ((1C* V-FIN) OR (-1C* V-FIN));
-- OR separates here conditions, not tagsets.
Template. Template ::= "(" Cond1 ")" ;
separator nonempty Template "OR" ;

--------------------------------------------------------------------------------
-- Positions

Exactly.     	 Position ::= Signed ;
AtLeastPre.  	 Position ::= "*" Signed ;
AtLeastPost. 	 Position ::= Signed "*" ; 
AtLPostCaut1. 	 Position ::= Signed "C*" ;
AtLPostCaut2. 	 Position ::= "*" Signed "C" ;
Cautious.    	 Position ::= Position "C" ; 
--TODO: check if subreadings can be attached to a full position: e.g. -1C*/2 or 0C/*
Subreading.  	 Position ::= Signed "/" Signed ;
SubreadingStar.  Position ::= Signed "/" "*" ;

--------------------------------------------------------------------------------
-- Tags and tagsets

-- Tags can be wordforms or lemmas/wordforms, identifiers or named sets.

Lemma.   Tag1 ::= String ; 
WordF.   Tag1 ::= WordForm ;
LemmaCI. Tag1 ::= String "i" ; 
WordFCI. Tag1 ::= WordForm "i" ;
Regex.   Tag1 ::= String "r" ;
Tag.     Tag1 ::= Id ;
BOS.     Tag1 ::= ">>>" ;
EOS.     Tag1 ::= "<<<" ;
--_.       Tag1 ::= "+" Tag1 ; -- TODO what is this???

coercions Tag 1 ; 
--This takes care of parenthesising one tag (which has no effect, can be done randomly). 
--Parenthesising a list of tags will match the constructor And.
--Ideally, that list should be >1 tags.


-- Tags bound by And are like one tag.
-- These tags are separated by spaces and enclosed in parentheses.
And.     Tag1 ::= "(" [Tag] ")" ; -- Tag [Tag] ?
separator nonempty Tag "" ;

-- Tagsets
Union.      TagSet ::= TagSet1 OR TagSet ; 
Diff.    TagSet ::= TagSet1 "-" TagSet ;
Cart.    TagSet ::= TagSet1 "+" TagSet ;
All.     TagSet ::= "(*)" ;

-- A single tag may be either a tag, or a named tag set.
-- We have no way of knowing which one, just by the form of the identifier.
-- We'll just try both options.
Named.   TagSet1 ::= Tag ;

coercions TagSet 1 ;

rules OR ::= "OR" | "|" | "or" ;

--------------------------------------------------------------------------------

token ComplexId 
      ( -- Ids that start with letters or carefully (=ad hoc) selected symbols
        ('\\'|'+'|'<'|letter)
               (digit|letter|'/'|'\\'|'_'|','|'+'|'-'|'!'|'¿'|'¡'|'?'|'!'|'>')*

      |
 		 -- If an identifier begins with -, it may not end in 'C,' '*', or digit:
 		 -- otherwise positions are recognised as ids.
        ('-')  (digit|letter|'/'|'\\'|'_'|','|'+'|'-'|'!'|'¿'|'¡'|'?'|'!'|'>')*
		(upper - ["C"]|lower|'/'|'\\'|'_'|','|'+'|'-'|'!'|'¿'|'¡'|'?'|'!'|'>')

	  | -- Identifier beginning with - may end in 'C' or '*', if there is no numbers.
        ('-')  (letter|'/'|'\\'|'_'|','|'+'|'-'|'!'|'¿'|'¡'|'?'|'!'|'>')+
		
      ) ;


token Signed ('-'? (digit)+) ;

-- String would cover this too, but I'll just do the more careful matching here.
--token WordForm ({"\"<"} ((char - ["\">"]))* {">\""}) ;
token WordForm ({"\"<"} ((char - [" \n"]))* {">\""}) ;

--token Punct ('/'|'\\'|'_'|'+'|'-'|'!'|'¿'|'¡'|'?'|'!'|'←'|'→') ;